name: Build and Deploy Documentation

on:
  push:
    branches: [ master, main, github-actions ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Allow manual triggering

env:
  # Use ARM GCC toolchain for building
  ARM_TOOLCHAIN_VERSION: "14.3.Rel1"

jobs:
  build-all:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Cache ARM toolchain
      id: cache-arm-toolchain
      uses: actions/cache@v4
      with:
        path: /opt/arm-toolchain
        key: arm-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}
    
    - name: Install ARM GCC toolchain
      if: steps.cache-arm-toolchain.outputs.cache-hit != 'true'
      run: |
        cd /tmp
        wget -q "https://developer.arm.com/-/media/Files/downloads/gnu/${{ env.ARM_TOOLCHAIN_VERSION }}/binrel/arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi.tar.xz"
        sudo mkdir -p /opt/arm-toolchain
        sudo tar -xf arm-gnu-toolchain-${{ env.ARM_TOOLCHAIN_VERSION }}-x86_64-arm-none-eabi.tar.xz -C /opt/arm-toolchain --strip-components=1

    - name: Install Doxygen and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz python3 python3-pip
    
    - name: Add ARM toolchain to PATH
      run: echo "/opt/arm-toolchain/bin" >> $GITHUB_PATH
    
    - name: Verify programm versions
      run: |
        arm-none-eabi-gcc --version
        arm-none-eabi-objcopy --version
        doxygen --version
        python3 --version
    
    - name: Build libopencm3 libraries
      run: |
        echo "Building libopencm3 libraries..."
        make -j$(nproc) lib
        echo "Library build completed successfully"
    
    - name: Upload library artifacts
      uses: actions/upload-artifact@v4
      with:
        name: libopencm3-libraries
        path: |
          lib/**/*.a
          lib/**/*.ld
          include/
        retention-days: 30
        compression-level: 6
    
    - name: Run basic tests
      run: |
        echo "Running basic validation..."
        
        # Set exit on error
        set -e
        
        # Track test results
        failed_tests=0
        
        # Helper function to test library existence
        test_library() {
          local lib_file="$1"
          local lib_name="$2"
          if test -f "$lib_file"; then
            echo "✅ $lib_name library built"
          else
            echo "❌ $lib_name library missing"
            failed_tests=$((failed_tests + 1))
          fi
        }
        
        # Check that key libraries were built successfully
        echo "Checking STM32 libraries..."
        test_library "lib/libopencm3_stm32f0.a" "STM32F0"
        test_library "lib/libopencm3_stm32f1.a" "STM32F1"
        test_library "lib/libopencm3_stm32f2.a" "STM32F2"
        test_library "lib/libopencm3_stm32f3.a" "STM32F3"
        test_library "lib/libopencm3_stm32f4.a" "STM32F4"
        test_library "lib/libopencm3_stm32f7.a" "STM32F7"
        test_library "lib/libopencm3_stm32l0.a" "STM32L0"
        test_library "lib/libopencm3_stm32l1.a" "STM32L1"
        test_library "lib/libopencm3_stm32l4.a" "STM32L4"
        test_library "lib/libopencm3_stm32g0.a" "STM32G0"
        test_library "lib/libopencm3_stm32g4.a" "STM32G4"
        test_library "lib/libopencm3_stm32h7.a" "STM32H7"
        test_library "lib/libopencm3_stm32u5.a" "STM32U5"
        
        echo "Checking LPC libraries..."
        test_library "lib/libopencm3_lpc13xx.a" "LPC13XX"
        test_library "lib/libopencm3_lpc17xx.a" "LPC17XX"
        test_library "lib/libopencm3_lpc43xx_m0.a" "LPC43XX M0"
        test_library "lib/libopencm3_lpc43xx.a" "LPC43XX M4"

        echo "Checking NXP Kinetis libraries..."
        test_library "lib/libopencm3_lm3s.a" "LM3S"
        test_library "lib/libopencm3_lm4f.a" "LM4F"

        echo "Checking MSP432 libraries..."
        test_library "lib/libopencm3_msp432e4.a" "MSP432E4"
        
        echo "Checking EFM32 libraries..."
        test_library "lib/libopencm3_efm32tg.a" "EFM32TG"
        test_library "lib/libopencm3_efm32g.a" "EFM32G"
        test_library "lib/libopencm3_efm32lg.a" "EFM32LG"
        test_library "lib/libopencm3_efm32gg.a" "EFM32GG"
        test_library "lib/libopencm3_efm32hg.a" "EFM32HG"
        test_library "lib/libopencm3_efm32wg.a" "EFM32WG"
        test_library "lib/libopencm3_ezr32wg.a" "EFM32EZR32WG"
        
        echo "Checking Nordic libraries..."
        test_library "lib/libopencm3_nrf51.a" "NRF51"
        test_library "lib/libopencm3_nrf52.a" "NRF52"

        echo "Checking Atmel SAM libraries..."
        test_library "lib/libopencm3_sam3a.a" "SAM3A"
        test_library "lib/libopencm3_sam3n.a" "SAM3N"
        test_library "lib/libopencm3_sam3s.a" "SAM3S"
        test_library "lib/libopencm3_sam3u.a" "SAM3U"
        test_library "lib/libopencm3_sam3x.a" "SAM3X"
        test_library "lib/libopencm3_sam4l.a" "SAM4L"
        test_library "lib/libopencm3_samd.a" "SAMD"
        
        echo "Checking other libraries..."
        test_library "lib/libopencm3_vf6xx.a" "VF6XX"
        test_library "lib/libopencm3_swm050.a" "SWM050"
        test_library "lib/libopencm3_pac55xx.a" "PAC55XX"
        test_library "lib/libopencm3_gd32f1x0.a" "GD32F1x0"
        
        # Report final results
        if [ $failed_tests -eq 0 ]; then
          echo "✅ All library validation tests completed successfully!"
        else
          echo "❌ $failed_tests library validation tests failed!"
          echo "Build validation failed - some expected libraries were not built."
          exit 1
        fi
    
    - name: Build documentation
      run: |
        echo "Building documentation..."
        make doc

    - name: Check for Doxygen warnings
      run: |
        cd doc
        echo "Checking for Doxygen warnings..."
        
        # Check if there are any warnings
        for target_dir in */; do
          if [ -d "$target_dir/html" ] && [ "$target_dir" != "templates/" ]; then
            echo "Checking $target_dir for warnings..."
            if [ -f "$target_dir/doxygen.log" ]; then
              
              # Check for errors in the Doxygen log            
              if grep -q "error:" "$target_dir/doxygen.log"; then
                echo "❌ Doxygen errors found in $target_dir:"
                grep "error:" "$target_dir/doxygen.log" || true
                exit 1

              # Check for warnings in the Doxygen log
              elif grep -q "warning:" doxygen_warnings.log; then
                echo "⚠️ Doxygen warnings found in $target_dir:"
                grep "warning:" "$target_dir/doxygen.log" || true
                echo "Please review and fix these warnings to improve documentation quality."
                # Don't fail the build on warnings, just report them
              
              else
                echo "✅ No Doxygen warnings found in $target_dir!"
              fi
            fi
          fi
        done
    
    - name: Prepare deployment files
      run: |
        cd doc
        echo "Preparing documentation for deployment..."
        
        # Create deployment directory
        mkdir -p ../deploy
        
        # Copy main documentation
        if [ -d "html" ]; then
          echo "Copying main documentation..."
          cp -r html ../deploy/
        else
          echo "Warning: Main html directory not found"
        fi
        
        # Copy target-specific documentation
        echo "Copying target-specific documentation..."
        for target_dir in */; do
          if [ -d "$target_dir/html" ] && [ "$target_dir" != "templates/" ]; then
            echo "Copying $target_dir documentation..."
            mkdir -p "../deploy/$target_dir"
            cp -r "$target_dir/html" "../deploy/$target_dir/"
          fi
        done
        
        # Filter out build artifacts and unnecessary files
        echo "Cleaning up deployment files..."
        cd ../deploy
        
        # Remove Doxygen build artifacts
        find . -name "*.md5" -delete 2>/dev/null || true
        find . -name "*.map" -delete 2>/dev/null || true
        find . -name "*.tmp" -delete 2>/dev/null || true
        find . -name "doxy.sourcelist" -delete 2>/dev/null || true
        find . -name "Doxyfile" -delete 2>/dev/null || true
        find . -name "DoxygenLayout_*.xml" -delete 2>/dev/null || true
        find . -name "doxygen_*.log" -delete 2>/dev/null || true
        find . -name "*.tag" -delete 2>/dev/null || true
        
        # Remove backup and temporary files
        find . -name "*~" -delete 2>/dev/null || true
        find . -name "*.bak" -delete 2>/dev/null || true
        find . -name ".DS_Store" -delete 2>/dev/null || true
        
        echo "Deployment preparation completed"
        
        # Show deployment statistics
        echo "Deployment statistics:"
        echo "  HTML files: $(find . -name "*.html" | wc -l)"
        echo "  CSS files:  $(find . -name "*.css" | wc -l)"
        echo "  JS files:   $(find . -name "*.js" | wc -l)"
        echo "  Image files: $(find . -name "*.png" -o -name "*.gif" -o -name "*.svg" -o -name "*.jpg" | wc -l)"
        echo "  Total size: $(du -sh . | cut -f1)"
    
    - name: Deduplicate documentation files
      run: |
        echo "Deduplicating documentation files..."
        python3 scripts/deduplicate_docs.py deploy/
        
        echo "Post-deduplication statistics:"
        echo "  HTML files: $(find deploy/ -name "*.html" | wc -l)"
        echo "  CSS files:  $(find deploy/ -name "*.css" | wc -l)"
        echo "  JS files:   $(find deploy/ -name "*.js" | wc -l)"
        echo "  Image files: $(find deploy/ -name "*.png" -o -name "*.gif" -o -name "*.svg" -o -name "*.jpg" | wc -l)"
        echo "  Total size: $(du -sh deploy/ | cut -f1)"
   
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: libopencm3-documentation
        path: deploy/
        retention-days: 30
        compression-level: 6
    