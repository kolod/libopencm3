#!/usr/bin/env python3
#
# Compute and insert the vector table checksum required for booting the
# LPC43xx and some other NXP ARM microcontrollers.
#
# usage: lpcvtcksum firmware.bin
#
# This file is part of the libopencm3 project.
#
# Copyright (C) 2012 Michael Ossmann <mike@ossmann.com>
#
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

from sys import exit, argv
from struct import unpack, pack, error
from pathlib import Path


def main():
    # Check command line arguments
    if len(argv) != 2:
        print("Usage: python lpcvtcksum firmware.bin")
        print("")
        print("Compute and insert the vector table checksum required for booting")
        print("LPC43xx and some other NXP ARM microcontrollers.")
        print("")
        print("The script modifies the firmware.bin file in place, inserting the")
        print("required checksum at offset 0x1C (7th vector table entry) and")
        print("padding the file to a multiple of 4096 bytes.")
        exit(1)

    # Check if the binary file exists
    filename = argv[1]
    file_path = Path(filename)
    if not file_path.is_file():
        print(f"Error: File '{filename}' not found.")
        exit(1)

    try:
        binfile = file_path.open('r+b')
        rawvectors = binfile.read(32)

        # Check if file has enough data for vector table
        if len(rawvectors) < 32:
            print(f"Error: File '{filename}' is too small (needs at least 32 bytes for vector table).")
            binfile.close()
            exit(1)

        vectors = list(unpack('<IIIIIIII', rawvectors))
        
    except IOError as e:
        print(f"Error: Unable to open or read file '{filename}': {e}")
        exit(1)
        
    except error as e:
        print(f"Error: Invalid file format in '{filename}': {e}")
        if 'binfile' in locals():
            binfile.close()
        exit(1)

    # compute vector table checksum
    checksum_sum = sum(vectors[:7])
    vectors[7] = (1 + (0xffffffff ^ (0xffffffff & checksum_sum))) & 0xffffffff

    print(f"computed vector table checksum: 0x{vectors[7]:08x}")

    rawremainder = binfile.read()
    remainder = list(unpack('B' * len(rawremainder), rawremainder))
    numbytes = len(remainder) + 32

    # pad to multiple of 4096 bytes to make GoodFET happy
    if (numbytes % 4096):
        remainder.extend([0] * (4096 - numbytes % 4096))

    # rewrite file with checksum and padding
    try:
        data = vectors
        data.extend(remainder)
        binfile.seek(0)
        binfile.write(pack('<IIIIIIII' + 'B' * len(remainder), *data))
        binfile.close()
        print(f"Successfully processed '{filename}'")
        
    except IOError as e:
        print(f"Error: Unable to write to file '{filename}': {e}")
        binfile.close()
        exit(1)
        
    except error as e:
        print(f"Error: Failed to pack data for '{filename}': {e}")
        binfile.close()
        exit(1)


if __name__ == "__main__":
    main()
